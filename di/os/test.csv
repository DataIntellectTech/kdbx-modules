action,ms,bytes,lang,code,repeat,minver,comment
before,0,0,q,os:use`di.os,1,,Initialize package
true,0,0,q,-1h=type .m.di.0os.iswindows,1,1,

run,0,0,q,k4unit.mock[`.m.di.0os.iswindows;0b],1,1,
true,0,0,q,enlist["path"]~distinct os.topath each .testos.pathvars"path",1,1,
true,0,0,q,enlist["path/to/file.ext"]~distinct os.topath each .testos.pathvars"path/to/file.ext",1,1,
true,0,0,q,enlist["/abs/path/'with quotes'/x"]~distinct os.topath each .testos.pathvars"/abs/path/'with quotes'/x",1,1,
true,0,0,q,enlist["win/style/path"]~distinct os.topath each .testos.pathvars"win\\style\\path",1,1,
true,0,0,q,enlist["/win/style/path"]~distinct os.topath each .testos.pathvars"\\win\\style\\path",1,1,
run,0,0,q,k4unit.mock[`.m.di.0os.iswindows;1b],1,1,
true,0,0,q,enlist["path"]~distinct os.topath each .testos.pathvars"path",1,1,
true,0,0,q,enlist["path\\to\\file.ext"]~distinct os.topath each .testos.pathvars"path/to/file.ext",1,1,
true,0,0,q,enlist["C:\\path\\to\\win\\dir"]~distinct os.topath each .testos.pathvars"C:\\path\\to\\win\\dir",1,1,
true,0,0,q,enlist["\\abs\\path\\'with quotes'\\x"]~distinct os.topath each .testos.pathvars"/abs/path/'with quotes'/x",1,1,
run,0,0,q,k4unit.unmock[],1,1,

true,0,0,q,enlist[.testos.sep sv(.testos.cwd;"foo")]~distinct os.abspath each .testos.pathvars"foo",1,1,
true,0,0,q,enlist[.testos.cwd]~distinct os.abspath each .testos.pathvars".",1,1,
true,0,0,q,enlist[.testos.sep sv({neg[min(1;count x)]_x}.testos.sep vs .testos.cwd)]~distinct os.abspath each .testos.pathvars"..",1,1,
true,0,0,q,enlist[.testos.sep sv({neg[min(1;count x)]_x}.testos.sep vs .testos.cwd)]~distinct os.abspath each .testos.pathvars"../",1,1,
true,0,0,q,"enlist[.testos.sep sv({neg[min(1;count x)]_x}.testos.sep vs .testos.cwd),enlist""foo""]~distinct os.abspath each .testos.pathvars""../foo""",1,1,
true,0,0,q,"enlist[.testos.sep sv({neg[min(2;count x)]_x}.testos.sep vs .testos.cwd),enlist""foo""]~distinct os.abspath each .testos.pathvars""../../foo/""",1,1,
true,0,0,q,"enlist[.testos.sep sv({neg[min(1;count x)]_x}.testos.sep vs .testos.cwd),(""foo"";""blah"")]~distinct os.abspath each .testos.pathvars""../foo/bar/./../blah""",1,1,
true,0,0,q,"enlist[.testos.root,.testos.sep sv(""foo"";""other-path"";enlist""x"")]~distinct os.abspath each .testos.pathvars""/foo/bar/blah/../../path/../other-path/./x""",1,1,
true,0,0,q,"enlist[.testos.root,.testos.sep sv(""foo"";""bar"")]~distinct os.abspath each .testos.pathvars""/../foo/bar""",1,1,
true,0,0,q,"enlist[.testos.root,""foo""]~distinct os.abspath each .testos.pathvars raze[(1+count .testos.sep vs .testos.cwd)#enlist""../""],""foo""",1,1,
fail,0,0,q,enlist[.testos.sep sv(.testos.osdir;"init.q")]~disctinct os.abspath each .testos.pathvars"/"sv(.testos.osdir;"init.q/"),1,1,

true,0,0,q,.testos.nyiwin"enlist[.testos.sep sv(.testos.osdir;\"foo\")]~distinct os.realpath each .testos.pathvars\"/\"sv(.testos.osdirstd;\"/foo\")",1,1,
true,0,0,q,".testos.nyiwin""enlist[.testos.sep sv(-1_.testos.sep vs .testos.osdir),enlist\""foo\""]~distinct os.realpath each .testos.pathvars\""/\""sv(.testos.osdir;\""/../foo\"")""",1,1,
true,0,0,q,.testos.nyiwin"enlist[.testos.sep sv(.testos.osdir;\"foo\")]~distinct os.realpath each .testos.pathvars\"/\"sv(.testos.osdirstd;\"/foo/\")",1,1,
true,0,0,q,.testos.nyiwin"enlist[.testos.osdir]~distinct os.realpath each .testos.pathvars\"/\"sv(.testos.osdirstd;enlist\".\")",1,1,

run,0,0,q,"@[os.deldir;.testos.osdirstd,""/testdir"";::]",1,1,clean up just in case
true,0,0,q,"not os.exists .testos.osdirstd,""/testdir""",1,1,absolute dir doesn't exist
true,0,0,q,"not os.isfile .testos.osdirstd,""/testdir""",1,1,
true,0,0,q,"not os.isdir .testos.osdirstd,""/testdir""",1,1,
true,0,0,q,"not os.issymlink .testos.osdirstd,""/testdir""",1,1,
run,0,0,q,"os.mkdir .testos.osdirstd,""/testdir""",1,1,create it
true,0,0,q,"os.exists .testos.osdirstd,""/testdir""",1,1,now absolute dir exists
true,0,0,q,"os.exists`$.testos.osdirstd,""/testdir""",1,1,same but sym
true,0,0,q,"os.exists hsym`$.testos.osdirstd,""/testdir""",1,1,same but hsym
true,0,0,q,"not os.isfile .testos.osdirstd,""/testdir""",1,1,
true,0,0,q,"os.isdir .testos.osdirstd,""/testdir""",1,1,
true,0,0,q,"not os.issymlink .testos.osdirstd,""/testdir""",1,1,
run,0,0,q,"os.mkdir .testos.osdirstd,""/testdir""",1,1,nop if it already exists
run,0,0,q,"os.cd .testos.osdirstd,""/testdir""",1,1,cd into absolute path
true,0,0,q,system["cd"]~.testos.sep sv(.testos.osdir;"testdir"),1,1,check we're in the right place
true,0,0,q,os.exists".",1,1,self exists
true,0,0,q,not os.isfile".",1,1,
true,0,0,q,os.isdir".",1,1,
true,0,0,q,not os.issymlink".",1,1,
true,0,0,q,os.exists"../testdir/",1,1,self exists from outside
true,0,0,q,not os.isfile"..",1,1,
true,0,0,q,os.isdir"..",1,1,
true,0,0,q,not os.issymlink"..",1,1,
true,0,0,q,not os.exists"reldir",1,1,relative dir doesn't exist
true,0,0,q,not os.isfile"reldir",1,1,
true,0,0,q,not os.isdir"reldir",1,1,
true,0,0,q,not os.issymlink"reldir",1,1,
run,0,0,q,os.mkdir"reldir",1,1,make relative dir
true,0,0,q,os.exists"reldir",1,1,now relative dir exists
run,0,0,q,os.mkdir"nested/rel/dir",1,1,
true,0,0,q,os.exists"nested/rel/dir",1,1,
run,0,0,q,"os.mkdir .testos.osdirstd,""/testdir/nested/abs/dir""",1,1,
true,0,0,q,os.exists"nested/abs/dir",1,1,
run,0,0,q,"os.cp[.testos.osdirstd,""/init.q"";""reldir""]",1,1,copy relative path
true,0,0,q,os.exists"reldir/init.q",1,1,
true,0,0,q,os.isfile"reldir/init.q",1,1,
true,0,0,q,not os.isdir"reldir/init.q",1,1,
true,0,0,q,not os.issymlink"reldir/init.q",1,1,
true,0,0,q,os.isfile"/"sv(.testos.osdirstd;"testdir/reldir/init.q"),1,1,
true,0,0,q,not os.isdir"/"sv(.testos.osdirstd;"testdir/reldir/init.q"),1,1,
true,0,0,q,not os.issymlink"/"sv(.testos.osdirstd;"testdir/reldir/init.q"),1,1,
run,0,0,q,os.cp["/"sv(.testos.osdirstd;"os.md");"."],1,1,copy from absolute path
true,0,0,q,os.exists"os.md",1,1,
true,0,0,q,os.exists"../os.md",1,1,
run,0,0,q,os.cp["reldir/init.q";"/"sv(.testos.osdirstd;"testdir")],1,1,copy to absolute path
true,0,0,q,os.exists"init.q",1,1,
true,0,0,q,os.exists"../init.q",1,1
fail,0,0,q,os.cp["idontexist.txt";"reldir"],1,1,
run,0,0,q,os.mv["init.q";"nested/rel/dir/."],1,1,
true,0,0,q,not os.exists"init.q",1,1,
true,0,0,q,os.exists"nested/rel/dir/init.q",1,1,
run,0,0,q,os.mv["/"sv(.testos.osdirstd;"testdir/os.md");"/"sv(.testos.osdirstd;"testdir/nested/abs/dir/")],1,1,
true,0,0,q,not os.exists"os.md",1,1,
true,0,0,q,os.exists"nested/abs/dir/os.md",1,1,
fail,0,0,q,os.mv["idontexist.txt";"nested"],1,1,
run,0,0,q,os.mv["nested";"nested-2"],1,1,
true,0,0,q,not os.isdir"nested",1,1,
true,0,0,q,os.isdir"nested-2",1,1,
run,0,0,q,os.cpdir["nested-2";"/"sv(.testos.osdirstd;"testdir/nested-copy")],1,1,
true,0,0,q,os.isdir"nested-2",1,1,
true,0,0,q,os.isdir"nested-copy",1,1,
true,0,0,q,os.exists"nested-copy/rel/dir/init.q",1,1,sanity check
run,0,0,q,os.deldir"nested-copy",1,1,
true,0,0,q,not os.exists"nested-copy",1,1,
run,0,0,q,os.cp["reldir/init.q";]each("reldir/os_1.q";"reldir/os_2.json";"reldir/os_3.txt";"reldir/os_4.q"),1,1,
true,0,0,q,`init.q`os_1.q`os_2.json`os_3.txt`os_4.q~key`:reldir,1,1,
fail,0,0,q,os.cp["reldir/*.q";"i/dont/exist"],1,1,
run,0,0,q,os.cp["reldir/*.q";"nested-2/rel/dir"],1,1,
true,0,0,q,`init.q`os_1.q`os_4.q~key`$":nested-2/rel/dir",1,1,
run,0,0,q,os.del"nested-2/rel/dir/init.q",1,1,
true,0,0,q,not os.exists"nested-2/rel/dir/init.q",1,1,
fail,0,0,q,os.del"nested-2/rel/dir/init.q",1,1,
run,0,0,q,os.del"/"sv(.testos.osdirstd;"testdir/nested-2/rel/dir/os_4.q"),1,1,
true,0,0,q,not os.exists"nested-2/rel/dir/os_4.q",1,1

run,0,0,q,.testos.symlinkable"os.createsymlink[\"reldir/init.q\";\"rellink\"]",1,1,
true,0,0,q,.testos.symlinkable"os.issymlink\"rellink\"",1,1,
true,0,0,q,.testos.symlinkable"not os.isfile\"rellink\"",1,1,
true,0,0,q,.testos.symlinkable"not os.isdir\"rellink\"",1,1,
true,0,0,q,.testos.symlinkable"enlist[.testos.sep sv(.testos.osdir;\"testdir\";\"rellink\")]~distinct os.abspath each .testos.pathvars\"rellink\"",1,1,
true,0,0,q,.testos.nyiwin"enlist[.testos.sep sv(.testos.osdir;\"testdir/reldir/init.q\")]~distinct os.realpath each .testos.pathvars\"rellink\"",1,1,
run,0,0,q,.testos.symlinkable"os.createsymlink[\"/\"sv(.testos.osdirstd;\"testdir/reldir/os_1.q\");\"/\"sv(.testos.osdirstd;\"testdir/abslink\")]",1,1,
true,0,0,q,.testos.symlinkable"os.issymlink\"/\"sv(.testos.osdirstd;\"testdir/abslink\")",1,1,
true,0,0,q,.testos.symlinkable"not os.isfile\"/\"sv(.testos.osdirstd;\"testdir/abslink\")",1,1,
true,0,0,q,.testos.symlinkable"not os.isdir\"/\"sv(.testos.osdirstd;\"testdir/abslink\")",1,1,
true,0,0,q,.testos.symlinkable"enlist[.testos.sep sv(.testos.osdir;\"testdir\";\"abslink\")]~distinct os.abspath each .testos.pathvars\"/\"sv(.testos.osdirstd;\"testdir/abslink\")",1,1,
true,0,0,q,.testos.nyiwin"enlist[.testos.sep sv(.testos.osdir;\"testdir/reldir/os_1.q\")]~distinct os.realpath each .testos.pathvars\"/\"sv(.testos.osdirstd;\"testdir/abslink\")",1,1,
run,0,0,q,.testos.symlinkable"os.createsymlink[\"idontexist.q\";\"badlink\"]",1,1,can still create bad links
true,0,0,q,.testos.symlinkable"os.exists\"badlink\"",1,1,
true,0,0,q,.testos.symlinkable"not os.isfile\"badlink\"",1,1,
true,0,0,q,.testos.symlinkable"not os.isdir\"badlink\"",1,1,
true,0,0,q,.testos.symlinkable"os.issymlink\"badlink\"",1,1,
true,0,0,q,.testos.nyiwin"(.testos.sep sv(.testos.osdir;\"testdir/idontexist.q\"))~os.realpath\"badlink\"",1,1,
true,0,0,q,.testos.nyiwin"not os.exists os.realpath\"badlink\"",1,1,
run,0,0,q,.testos.symlinkable"os.createsymlink[\"reldir\";\"dirlink\"]",1,1,
true,0,0,q,.testos.symlinkable"os.exists\"dirlink\"",1,1,
true,0,0,q,.testos.symlinkable"os.issymlink\"dirlink\"",1,1,
true,0,0,q,.testos.symlinkable"not os.isfile\"dirlink\"",1,1,
true,0,0,q,.testos.symlinkable"not os.isdir\"dirlink\"",1,1,

true,0,0,q,.testos.nyiwin"(::)~os.chmod[\"reldir/init.q\";777]",1,1,
true,0,0,q,.testos.nowin"\"-rwxrwxrwx\"~first\" \"vs first system\"ls -l reldir/init.q\"",1,1,
true,0,0,q,.testos.nyiwin"(::)~os.chmod[\"/\"sv(.testos.osdirstd;\"testdir/reldir\");\"-R 777\"]",1,1,
true,0,0,q,.testos.nowin"\"drwxrwxrwx\"~first\" \"vs first system\"ls -ld reldir\"",1,1,
true,0,0,q,.testos.nowin"enlist[\"-rwxrwxrwx\"]~distinct first each\" \"vs'1_system\"ls -l reldir\"",1,1,
true,0,0,q,.testos.nowin".[os.chmod;(\"idonotexist\";777);::]~\"os\"",1,1,
run,0,0,q,.testos.nyiwin".testos.chownable\"os.chown[\\\"reldir/init.q\\\";\\\"nobody\\\"]\"",1,1,
true,0,0,q,.testos.nowin".testos.chownable\"\\\"nobody\\\"~(\\\" \\\"vs first system\\\"ls -l reldir/init.q\\\")2\"",1,1,

run,0,0,q,os.cd .testos.cwd,1,1,
run,0,0,q,"os.deldir .testos.osdirstd,""/testdir""",1,1,

run,0,0,q,os.setdrysyscalls 1b,1,1,
run,0,0,q,k4unit.mock[`.m.di.0os.iswindows;0b],1,1,
run,0,0,q,os.kill[1234;6],1,1,
run,0,0,q,os.kill2 5000,1,1,
run,0,0,q,os.kill3 6050,1,1,
run,0,0,q,os.kill9 5060,1,1,
true,0,0,q,"os.getdrysyscalls[]~""kill -"",/:""6239"",'"" "",'string 1234 5000 6050 5060",1,1,
run,0,0,q,os.cleardrysyscalls[],1,1,
run,0,0,q,k4unit.mock[`.m.di.0os.iswindows;1b],1,1,
run,0,0,q,os.kill[1234;6],1,1,
run,0,0,q,os.kill2 5000,1,1,
run,0,0,q,os.kill3 6050,1,1,
run,0,0,q,os.kill9 5060,1,1,
true,0,0,q,"(os.getdrysyscalls[])~""taskkill "",/:(""/PID 1234"";""/PID 5000"";""/PID 6050"";""/f /PID 5060"")",1,1,
run,0,0,q,os.cleardrysyscalls[],1,1,
run,0,0,q,os.setdrysyscalls 0b,1,1,
run,0,0,q,k4unit.unmock[],1,1,

true,0,0,q,{s:.z.p;os.sleep 1;$[.m.di.0os.iswindows;div[;10];][0D00:00:01]<.z.p-s}[],1,1,windows timings are unreliable

true,0,0,q,os.pwd[]~.testos.cwd,1,1,

run,0,0,q,@[os.del;"fifo.test";::],1,1,clean up just in case
true,0,0,q,.testos.nyiwin"(::)~os.mkfifo\"fifo.test\"",1,1,
true,0,0,q,.testos.nowin"\"p\"~first first\" \"vs first system\"ls -l fifo.test\"",1,1,
run,0,0,q,.testos.nowin"os.del\"fifo.test\"",1,1,

run,0,0,q,.testos.tmpfile:os.mktemp[],1,1,
true,0,0,q,os.exists .testos.tmpfile,1,1,
true,0,0,q,os.isfile .testos.tmpfile,1,1,
true,0,0,q,not os.isdir .testos.tmpfile,1,1,
true,0,0,q,not os.issymlink .testos.tmpfile,1,1,
true,0,0,q,()~read0 hsym`$.testos.tmpfile,1,1,
run,0,0,q,os.del .testos.tmpfile,1,1,
run,0,0,q,.testos.tmpdir:os.mktempdir[],1,1,
true,0,0,q,os.exists .testos.tmpdir,1,1,
true,0,0,q,not os.isfile .testos.tmpdir,1,1,
true,0,0,q,os.isdir .testos.tmpdir,1,1,
true,0,0,q,not os.issymlink .testos.tmpdir,1,1,
true,0,0,q,0=count key hsym`$.testos.tmpdir,1,1,
run,0,0,q,os.deldir .testos.tmpdir,1,1,

run,0,0,q,os.setdrysyscalls 1b,1,1,
run,0,0,q,os.abspath"path",1,1,
run,0,0,q,.testos.nowin"os.realpath\"path\"",1,1,
run,0,0,q,os.exists"path",1,1,
run,0,0,q,os.issymlink"path",1,1,
run,0,0,q,os.del"path",1,1,
run,0,0,q,os.deldir"path",1,1,
run,0,0,q,os.mkdir"path",1,1,
run,0,0,q,os.mv["src";"dest"],1,1,
run,0,0,q,os.cp["src";"dest"],1,1,
run,0,0,q,os.cpdir["src";"dest"],1,1,
run,0,0,q,os.kill[5000;9],1,1,
run,0,0,q,os.sleep 5,1,1,
run,0,0,q,os.cd"path",1,1,
run,0,0,q,.testos.nowin"os.chmod[\"path\";\"777\"]",1,1,
run,0,0,q,.testos.nowin"os.chown[\"path\";\"user\"]",1,1,
true,0,0,q,os.pwd[]~"",1,1,
run,0,0,q,os.createsymlink["target";"name"],1,1,
run,0,0,q,.testos.nowin"os.mkfifo\"path\"",1,1,
run,0,0,q,os.mktemp[],1,1,
true,0,0,q,$[.m.di.0os.iswindows;15;19]=count os.getdrysyscalls[],1,1,
true,0,0,q,min 10h='type each os.getdrysyscalls[],1,1,
run,0,0,q,os.cleardrysyscalls[],1,1,
true,0,0,q,0=count os.getdrysyscalls[],1,1,
run,0,0,q,os.setdrysyscalls 0b,1,1,
true,0,0,q,0<count os.pwd[],1,1,

run,0,0,q,.testos.issuewarnings[],1,1,
