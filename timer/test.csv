action,ms,bytes,lang,code,repeat,minver,comment
comment,,,,,,,Testing for adding jobs with all methods
before,0,0,q,.timer.cp:{2025.03.03D12:00:00.000},1,,Set timestamp return func for testing
run,0,0,q,.timer.addjob.custom[`testcustom1;{};();10;1;(enlist `maxruns)!(enlist 3)],1,,Add job for custom 1
true,0,0,q,`testcustom1 in key .timer.jobs,1,,Test job in table for custom 1
true,0,0,q,.timer.jobs[`testcustom1][`maxruns]=3,1,,Test option overwrite for custom 1
true,0,0,q,all .timer.jobs[`testcustom1][`maxtime`disableonfail`startattime]=(0Wp;1b;0Np),1,,Test option defaults for custom 1
true,0,0,q,.timer.jobs[`testcustom1][`nextstart]=2025.03.03D12:00:10.000,1,,Test nextstart calculated for custom 1

run,0,0,q,.timer.addjob.custom[`testcustom2;{};();10;2;(enlist `maxtime)!(enlist 2025.03.03D13:00:10.000)],1,,Add job for custom 2
true,0,0,q,`testcustom2 in key .timer.jobs,1,,Test job in table for custom 2
true,0,0,q,.timer.jobs[`testcustom2][`maxtime]=2025.03.03D13:00:10.000,1,,Test option overwrite for custom 2
true,0,0,q,all .timer.jobs[`testcustom2][`maxruns`disableonfail`startattime]=(0Wi;1b;0Np),1,,Test option defaults for custom 2
true,0,0,q,.timer.jobs[`testcustom2][`nextstart]=2025.03.03D12:00:10.000,1,,Test nextstart calculated for custom 2
run,0,0,q,.timer.addjob.custom[`testcustom3;{};();10;1;(enlist `disableonfail)!(enlist 0b)],1,,Add job for custom 3
true,0,0,q,`testcustom3 in key .timer.jobs,1,,Test job in table for custom 3
true,0,0,q,not .timer.jobs[`testcustom3][`disableonfail],1,,Test option overwrite for custom 3
true,0,0,q,all .timer.jobs[`testcustom3][`maxruns`maxtime`startattime]=(0Wi;0Wp;0Np),1,,Test option defaults for custom 3
true,0,0,q,.timer.jobs[`testcustom3][`nextstart]=2025.03.03D12:00:10.000,1,,Test nextstart calculated for custom 3

run,0,0,q,.timer.addjob.custom[`testcustom4;{};();10;1;(enlist `startattime)!(enlist 2025.03.03D13:00:10.000)],1,,Add job for custom 4
true,0,0,q,`testcustom4 in key .timer.jobs,1,,Test job in table for custom 4
true,0,0,q,.timer.jobs[`testcustom4][`nextstart]=2025.03.03D13:00:10.000,1,,Test option overwrite for custom 4
true,0,0,q,all .timer.jobs[`testcustom4][`maxruns`maxtime`disableonfail]=(0Wi;0Wp;1b),1,,Test option defaults for custom 4
true,0,0,q,.timer.jobs[`testcustom4][`nextstart]=2025.03.03D13:00:10.000,1,,Test nextstart updated for custom 4

run,0,0,q,.timer.addjob.custom[`testcustom5;{};();10;1;(`maxruns`disableonfail)!(4;0b)],1,,Test multiple option defaults for custom 5
true,0,0,q,`testcustom5 in key .timer.jobs,1,,Test job in table for custom 5
true,0,0,q,all .timer.jobs[`testcustom5][`maxruns`disableonfail]=(4i;0b),1,,Test options overwrites for custom 5
true,0,0,q,all .timer.jobs[`testcustom5][`maxtime`startattime]=(0Wp;0Np),1,,Test options defaults for custom 5
true,0,0,q,.timer.jobs[`testcustom5][`nextstart]=2025.03.03D12:00:10.000,1,,Test nextstart updated for custom 5
run,0,0,q,.timer.addjob.custom[`testcustom6;{};();10;1;(`maxruns`maxtime`disableonfail`startattime)!(3;2025.03.03D13:00:10.000;0b;2025.03.03D13:00:00.000)],1,,Add job for custom 5

true,0,0,q,`testcustom6 in key .timer.jobs,1,,Test job in table for custom 6
true,0,0,q,all .timer.jobs[`testcustom6][`maxruns`maxtime`disableonfail`startattime]=(3;2025.03.03D13:00:10.000;0b;2025.03.03D13:00:00.000),1,,Test options overwrites for custom 6
true,0,0,q,.timer.jobs[`testcustom6][`nextstart]=2025.03.03D13:00:00.000,1,,Test nextstart updated for custom 6

run,0,0,q,.timer.addjob.default[`testdefault1;{x+y};(1;2);10;1],1,,Add job for default 1
true,0,0,q,`testdefault1 in key .timer.jobs,1,,Test job in table for deafult 1
true,0,0,q,.timer.jobs[`testdefault1][`nextstart]=2025.03.03D12:00:10.000,1,,Test nextstart updated for default 1
run,0,0,q,.timer.addjob.default[`testdefault2;{x};(5);10;1],1,,Add job for default 2
true,0,0,q,`testdefault2 in key .timer.jobs,1,,Test job in table for deafult 2
true,0,0,q,.timer.jobs[`testdefault2][`nextstart]=2025.03.03D12:00:10.000,1,,Test nextstart updated for default 2

run,0,0,q,.timer.addjob.simple[`testsimple1;{};10],1,,Add job for simple 1
true,0,0,q,`testsimple1 in key .timer.jobs,1,,Test job in table for simple 1
true,0,0,q,.timer.jobs[`testsimple1][`nextstart]=2025.03.03D12:00:10.000,1,Test nextstart updated for simple 1

run,0,0,q,.timer.addjob.mode[`testmode1;{};();10;1],1,,Add job for mode 1
true,0,0,q,`testmode1 in key .timer.jobs,1,,Test job in table for mode 1
true,0,0,q,.timer.jobs[`testmode1][`nextstart]=2025.03.03D12:00:10.000,1,,Test nexstart calculated for mode 1
run,0,0,q,.timer.addjob.mode[`testmode2;{};();10;2],1,,Add job for mode 2
true,0,0,q,`testmode2 in key .timer.jobs,1,,Test job in table for mode 2
true,0,0,q,.timer.jobs[`testmode2][`nextstart]=2025.03.03D12:00:10.000,1,,Test nexstart calculated for mode 2
run,0,0,q,.timer.addjob.mode[`testmode3;{};();10;3],1,,Add job for mode 3
true,0,0,q,`testmode3 in key .timer.jobs,1,,Test job in table for mode 3
true,0,0,q,.timer.jobs[`testmode3][`nextstart]=2025.03.03D12:00:10.000,1,,Test nexstart calculated for mode 3
run,0,0,q,.timer.addjob.mode[`testmode4;{};();10;4],1,,Add job for mode 4
true,0,0,q,`testmode4 in key .timer.jobs,1,,Test job in table for mode 4
true,0,0,q,.timer.jobs[`testmode4][`nextstart]=2025.03.03D12:10:00.000,1,,Test nextstart calculated for mode 4
run,0,0,q,.timer.addjob.mode[`testmode5;{};();15;5],1,,Add job for mode 5
true,0,0,q,`testmode5 in key .timer.jobs,1,,Test job in table for mode 5
true,0,0,q,.timer.jobs[`testmode5][`nextstart]=2025.03.03D12:15:00.000,1,,Test nexstart calculated for mode 5

comment,,,,,,,Testing for utlity functions: enabling,disabling etc.
run,0,0,q,.timer.disable[],1,,Run timer disabling
true,0,0,q,not .timer.enabled,1,,Check timer disabled
run,0,0,q,.timer.enable[],1,,Run timer enabling
true,0,0,q,.timer.enabled,1,,Check timer enabled
run,0,0,q,.timer.disablejobs[`testcustom1],1,,Run disable jobs for one job
true,0,0,q,not .timer.jobs[`testcustom1][`status],1,,Check disabled jobs for one job
run,0,0,q,.timer.disablejobs[`testcustom2`testcustom3],1,,Run disable jobs for multiple jobs
true,0,0,q,all not exec status from .timer.jobs where id in `testcustom2`testcustom3,1,,Check disabled jobs for multiple jobs
run,0,0,q,.timer.enablejobs[`testcustom1],1,,Run enable jobs for one job
true,0,0,q,.timer.jobs[`testcustom1][`status],1,,Check enabled jobs for one job
run,0,0,q,.timer.enablejobs[`testcustom2`testcustom3],1,,Run enable jobs for multiple jobs
true,0,0,q,all exec status from .timer.jobs where id in `testcustom2`testcustom3,1,,Check enabled jobs for multiple jobs
run,0,0,q,.timer.deletejobs[`testcustom1],1,,Run delete jobs for one job
true,0,0,q,not `testcustom1 in key .timer.jobs,1,,Check deleted jobs for one job
run,0,0,q,.timer.deletejobs[`testcustom2`testcustom3],1,,Run delete jobs for multiple jobs
true,0,0,q,all not `testcustom2`testcustom3 in\: key .timer.jobs,1,,Check deleted jobs for mutliple jobs
true,0,0,q,11=count .timer.getactive[],1,,Check get active utility function

comment,,,,,,,Testing job execution and status/start time updates
run,0,0,q,.timer.addjob.custom[`testexec1;{.test.exec1:1b};();10;1;(enlist `maxruns)!(enlist 1)],1,,Add job for exec 1
run,0,0,q,.timer.runandschedule[`testexec1],1,,Test timer function exec 1
true,0,0,q,.test.exec1,1,,Test run suceeded for exec 1
true,0,0,q,not .timer.jobs[`testexec1][`status],1,,Test maxruns disabled job
run,0,0,q,.timer.addjob.default[`testexec2;{.test.exec2:x};(1b);10;1],1,,add job for exec 2
run,0,0,q,.timer.runandschedule[`testexec2],1,,Test timer function exec 2
true,0,0,q,.test.exec2,1,,Test run succeeded for exec 2
run,0,0,q,testexec3:{.test.exec3:x+y};.timer.addjob.default[`testexec3;`testexec3;(2;3);10;1],1,,Add job for exec 3
run,0,0,q,.timer.runandschedule[`testexec3],1,,Test timer function exec 3
true,0,0,q,.test.exec3=5,1,,Test run succeeded for exec 3
